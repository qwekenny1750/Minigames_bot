import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import  StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from commands.text_answers import bascet_greeting
from keyboard.reply_kb import basketball_begin, bascet_event_bascet_stop, start_rb
from database.requests import *

basketball_router = Router()

class ThrowBall(StatesGroup):
    start = State()
    throwing = State()
    stop = State()

@basketball_router.callback_query(F.data == 'bascetball')
async def bascet_greeting_start(callback: CallbackQuery):
    await callback.answer('–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ç—á!')
    await callback.message.answer(bascet_greeting, reply_markup=basketball_begin)

@basketball_router.message(F.text == '–ù–∞—á–∞—Ç—å –º–∞—Ç—á  üèÄ')
async def bascet_start(message: Message, state: FSMContext):
    await state.set_state(ThrowBall.start)
    await message.answer("–ë—Ä–æ—Å–∞–π –º—è—á –ø–µ—Ä–≤—ã–º", reply_markup=bascet_event_bascet_stop)
    await state.set_state(ThrowBall.throwing)

@basketball_router.message(F.dice, F.dice.emoji == 'üèÄ', StateFilter(ThrowBall.throwing))
async def throwing_ball(message: Message, state: FSMContext):
    
    data = await state.get_data()
    user_scores = data.get("user_scores", 0)
    bot_scores = data.get("bot_scores", 0)
    user_attempts = data.get("user_attempts", 0)
    bot_attempts = data.get("bot_attempts", 0)

    user_score: int = message.dice.value
    user_throwing = await message.answer("–ñ–¥–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è...", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(5)
    await user_throwing.delete()
    if user_score in [4, 5, 6]:
        await message.reply('–ü–æ–ø–∞–¥–∞–Ω–∏–µ! +3 –æ—á–∫–∞')
        user_scores+=3
    else:
        await message.reply('–ü—Ä–æ–º–∞—Ö')
    user_attempts+=1

    await asyncio.sleep(1)
    bot_throwing = await message.answer_dice(emoji='üèÄ', reply_markup=ReplyKeyboardRemove())
    bot_score: int = bot_throwing.dice.value

    await asyncio.sleep(5)
    if bot_throwing.dice.value in [4, 5, 6]:
        await bot_throwing.reply("–ü–æ–ø–∞–¥–∞–Ω–∏–µ! +3 –æ—á–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É", reply_markup=bascet_event_bascet_stop)
        bot_scores+=3
    else:
        await bot_throwing.reply("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!",reply_markup=bascet_event_bascet_stop)
    bot_attempts+=1

    await state.update_data(user_scores=user_scores, bot_scores=bot_scores, user_attempts=user_attempts, bot_attempts=bot_attempts)

    if bot_attempts == 6 and user_attempts == 6:
        await state.set_state(ThrowBall.stop)
        data = await state.get_data()
        user_scores = data.get('user_scores', 0)
        bot_scores = data.get('bot_scores', 0)
        user_attempts = data.get("user_attempts", 0)
        bot_attempts = data.get("bot_attempts", 0)

        user_like_winner_score = user_scores - bot_scores
        status = "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å" if user_scores > bot_scores else "–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π"
        await set_bascetball_scores(message.from_user.id,f'@{message.from_user.username}', status, user_like_winner_score)
        await message.answer(f"<b>–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n –í—ã - {status},\n–°—É–º–º–∞ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤ : {user_scores}\n–û—á–∫–∏ –±–æ—Ç–∞:{bot_scores}\n\n <b>–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_like_winner_score}</b>", reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_rb)
        await state.clear()


@basketball_router.message(F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π\n –º–∞—Ç—á')
async def throw_stop(message: Message, state: FSMContext):
    await state.set_state(ThrowBall.stop)

    data = await state.get_data()
    user_scores = data.get('user_scores', 0)
    bot_scores = data.get('bot_scores', 0)
    user_attempts = data.get("user_attempts", 0)
    bot_attempts = data.get("bot_attempts", 0)

    await message.answer('–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É, –º–∞—Ç—á –Ω–µ –æ–∫–æ–Ω—á–µ–Ω. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', reply_markup=ReplyKeyboardRemove())
    await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω—É—é –º–µ–Ω—é', reply_markup=start_rb)
    await state.clear()
